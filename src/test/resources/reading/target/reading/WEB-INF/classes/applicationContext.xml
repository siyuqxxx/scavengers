<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.0.xsd"
       default-lazy-init="false">

    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.reading.controller"/>

    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>    <!-- JSON转换器 -->
            </list>
        </property>
    </bean>

    <!-- 开启这个配置，spring才能识别@Scheduled注解  -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>

    <!-- freemarker的配置 -->
    <bean id="freemarkerConfigurer"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/html/"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">10</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">#.##</prop>
            </props>
        </property>
        <!-- 假设你需要使用freemarker的自定义标签，这里还需要增加这一段 -->
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape"/>
                <entry key="static_path" value="${static_path}"/>
                <entry key="hui_path" value="${hui_path}"/>
                <entry key="js_path" value="${js_path}"/>
                <entry key="up_path" value="${up_path}"/>
            </map>
        </property>
    </bean>
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>

    <!-- FreeMarker视图解析 如返回userinfo。。在这里配置后缀名ftl和视图解析器。。 -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="suffix" value=".html"/>
        <property name="contentType" value="text/html;charset=utf-8"/>
        <property name="requestContextAttribute" value="base"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
    </bean>

    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8"/>
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!-- 后台拦截 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/admin/**"/>
            <bean class="com.reading.controller.common.AdminInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--api接口拦截-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/api/**"/>
            <bean class="com.reading.controller.common.ApiInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--图书流通接口拦截-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/api/borrow/borrow*"/><!--借书-->
            <mvc:mapping path="/api/findBook/findBook*"/><!--找书-->
            <mvc:mapping path="/api/borrow/bookLent*"/><!--转借-->
            <mvc:mapping path="/api/allocation/saveList*"/><!--调拨-->
            <mvc:mapping path="/api/jdbook/selectFirstPage*"/><!--先读为快-->
            <bean class="com.reading.controller.common.ApiLimitBookCirculationInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--图书馆管理后台拦截-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/library/**"/>
            <bean class="com.reading.controller.common.LibraryInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--图书馆接口拦截-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/apilibrary/**"/>
            <bean class="com.reading.controller.common.ApiLibraryInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--馆员端接口拦截-->
    <!--<mvc:interceptors>-->
    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/librarian/**"/>-->
    <!--<bean class="com.reading.controller.common.ApiLibrarianInterceptor"/>-->
    <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <!--选书模块接口拦截-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/chooseBook/**"/>
            <bean class="com.reading.controller.common.ChooseBookInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--鸿雁web拦截-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/hongYanWeb/**"/>
            <bean class="com.reading.controller.common.HongYanWebInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--鸿雁app拦截-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/hongYan/**"/>
            <bean class="com.reading.controller.common.HongYanInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 后台quartz任务 -->
    <bean id="BackgroundServices" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.BackgroundServices"/>
        </property>
        <property name="targetMethod" value="syn"/>
        <property name="concurrent" value="false"/><!-- 作业不并发调度 -->
    </bean>
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="BackgroundServices"/>
        <!-- 每天00:00:01运行一次 -->
        <property name="cronExpression" value="1 00 00 * * ?"/>
    </bean>
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="cronTrigger"/>
                <ref bean="cronTriggerk"/>
                <!--<ref bean="cronTrigger1"/>-->
                <ref bean="cronTrigger2"/>
                <ref bean="checkExamSeatSign"/>
                <ref bean="checkExamSignSumTrigger"/>
                <ref bean="cronTriggerBean1"/>
                <ref bean="cronTriggerBean3"/>
                <ref bean="cronTriggerSeminarroomBean"/>
                <ref bean="cronTriggerDeleteIbeaconInfo"/>
                <ref bean="cronTriggerupdateSeminarroomStatus"/>
                <ref bean="GuessYouLikejob"/>
                <ref bean="cronTriggerUpdateCollectionCount"/>
                <ref bean="SynchronizeStudentCollegeTaskJob"/>
                <ref bean="cronTriggerGetLibraryCollectionCount"/>
            </list>
        </property>
    </bean>
    <!--每隔2小时运行一次检查考研座位预约首次签到-->
    <bean id="checkExamFirstSign" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.CheckExamSeatSign"/>
        </property>
        <property name="targetMethod" value="checkFirstSign"/>
        <property name="concurrent" value="false"/><!-- 作业不并发调度 -->
    </bean>
    <bean id="checkExamSeatSign" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="checkExamFirstSign"/>
        <!-- 每2小时运行一次 -->
        <property name="cronExpression" value="0 0 0/2 * * ?"/>
    </bean>

    <!--每天早上2点检查考研座位预约次数-->
    <bean id="checkExamSignSum" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.CheckSeatSignSum"/>
        </property>
        <property name="targetMethod" value="checkExamSeatSignSum"/>
        <property name="concurrent" value="false"/><!-- 作业不并发调度 -->
    </bean>
    <bean id="checkExamSignSumTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="checkExamSignSum"/>
        <!-- 每天早上2点运行一次 -->
        <property name="cronExpression" value="0 0 2 * * ?"/>
    </bean>

    <!--猜你喜欢每天跑书-->
    <bean id="GuessYouLike" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.GuessYouLikeJob"/>
        </property>
        <property name="targetMethod" value="dataGather"/>
        <property name="concurrent" value="false"/><!-- 作业不并发调度 -->
    </bean>
    <bean id="GuessYouLikejob" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="GuessYouLike"/>
        <!-- 每天早上1点运行一次 -->
        <property name="cronExpression" value="0 0/5 * * * ?"/>
    </bean>


    <!--&lt;!&ndash;后台控制，每七天同步一次JdBook表,刷新token&ndash;&gt;-->
    <!--<bean id="ConDeleteAndAdd" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
    <!--<property name="targetObject">-->
    <!--<bean class="com.reading.task.ConDeleteAndAdd"/>-->
    <!--</property>-->
    <!--<property name="targetMethod" value="deleteTableAndInsert"/>-->
    <!--<property name="concurrent" value="false"/>-->
    <!--</bean>-->
    <!--<bean id="cronTrigger1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
    <!--<property name="jobDetail" ref="ConDeleteAndAdd"/>-->
    <!--&lt;!&ndash; 每月10号，25号23点59分触发&ndash;&gt;-->
    <!--<property name="cronExpression" value="0 59 23 10,25 * ?"/>-->
    <!--</bean>-->

    <!--后台控制，每七天同步一次读取商品池书目-->
    <bean id="JdBookInfo" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.JdBookInfo"/>
        </property>
        <property name="targetMethod" value="getJdBookInfo"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="cronTrigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="JdBookInfo"/>
        <!-- 每7天运行一次 ，每周五凌晨2时15分运行-->
        <property name="cronExpression" value="0 15 2 ? * FRI"/>

    </bean>


    <!--后台控制，每七天同步一次新书到馆-->
    <bean id="InitializeNewBook" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.InitializeNewBook"/>
        </property>
        <property name="targetMethod" value="initNewBook"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="cronTriggerk" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="InitializeNewBook"/>
        <!-- 每7天运行一次 ，每周五凌晨1时59分运行-->
        <property name="cronExpression" value="0 59 1 ? * FRI"/>
    </bean>
    <!-- 从早八点到晚24点根据学校座位预留时间进行自动释放座位 -->
    <bean id="seatRelease1" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.ReleaseBySystemTaskJob"/>
        </property>
        <property name="targetMethod" value="laytime"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="cronTriggerBean1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="seatRelease1"/>
        <!-- 时间配置 -->
        <property name="cronExpression" value="* * 8-23 * * ?"/>
    </bean>

    <!-- 归还图书日期倒计时3第三天时推送消息 -->
    <bean id="restoreBookMessage" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.RestoreBookMessageTaskJob"/>
        </property>
        <property name="targetMethod" value="restoreBookMessage"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="cronTriggerBean3" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="restoreBookMessage"/>
        <!-- 时间配置，每天早上八点执行 -->
        <property name="cronExpression" value="0 0 8 * * ?"/>
    </bean>

    <!-- 根据学校研讨室预留时间进行自动释放座位 -->
    <bean id="releaseSeminarroom" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.ReleaseSeminarroomBySystemTaskJob"/>
        </property>
        <property name="targetMethod" value="releaseSeminarroom"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="cronTriggerSeminarroomBean" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="releaseSeminarroom"/>
        <!-- 时间配置 -->
        <property name="cronExpression" value="* * * * * ?"/>
    </bean>

    <!-- 每天凌晨2点删除yy_ibeacon_battery_info中，只保留（根据libraryId、ibeacon分组）最新100数据 -->
    <bean id="deleteIbeaconBatteryInfo"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.DeleteIbeaconBatteryInfoTaskJob"/>
        </property>
        <property name="targetMethod" value="deleteInfo"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="cronTriggerDeleteIbeaconInfo" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="deleteIbeaconBatteryInfo"/>
        <!-- 时间配置 -->
        <property name="cronExpression" value="0 0 2 * * ?"/>
    </bean>

    <!-- 每天每分钟修改研讨室的座位状态 -->
    <bean id="updateSeminarroomStatus" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.UpdateSeminarroomStatusTaskJob"/>
        </property>
        <property name="targetMethod" value="updateSeminarroomStatus"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="cronTriggerupdateSeminarroomStatus" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="updateSeminarroomStatus"/>
        <!-- 时间配置 -->
        <property name="cronExpression" value="0 * * * * ?"/>
    </bean>

    <!-- 每天早上3点更新在线采书馆藏量 -->
    <bean id="updateCollectionCount" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.UpdateCollectionCount"/>
        </property>
        <property name="targetMethod" value="updateCollectionCount"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="cronTriggerUpdateCollectionCount" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="updateCollectionCount"/>
        <!-- 时间配置 -->
        <property name="cronExpression" value="0 0 3 * * ?"/>
    </bean>

    <!-- 每天早上2点获得学生的学院 -->
    <bean id="getCollege" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.SynchronizeStudentCollegeTaskJob"/>
        </property>
        <property name="targetMethod" value="getStudentCollege"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="SynchronizeStudentCollegeTaskJob" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="getCollege"/>
        <!-- 时间配置 -->
        <property name="cronExpression" value="0 0 2 * * ?"/>
    </bean>

    <!-- 每天早上1点更新选书模块馆藏量（这里等有时间了和cronTriggerUpdateCollectionCount定时器做个合并） -->
    <bean id="getLibraryCollectionCount"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.reading.task.ZtBookGetCollectionCount"/>
        </property>
        <property name="targetMethod" value="getCollectionCount"/>
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="cronTriggerGetLibraryCollectionCount"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="getLibraryCollectionCount"/>
        <!-- 时间配置 -->
        <property name="cronExpression" value="0 0 1 * * ?"/>
    </bean>

    <!--mybatis-->
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:config.properties"/>
    </bean>

    <!-- 自动扫描 -->
    <context:component-scan base-package="com.reading.data.service.impl"/>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/reading/data/mapping/*.xml"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.reading.data.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

</beans>