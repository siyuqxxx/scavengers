<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.reading.data.dao.RobotConfigMapper">
    <resultMap id="BaseResultMap" type="com.reading.data.model.RobotConfig">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="library_id" property="libraryId" jdbcType="BIGINT"/>
        <result column="library_name" property="libraryName" jdbcType="VARCHAR"/>
        <result column="apikey" property="apikey" jdbcType="VARCHAR"/>
        <result column="token" property="token" jdbcType="VARCHAR"/>
        <result column="versions" property="versions" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="matching_score" property="matchingScore" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, library_id, library_name, apikey, token, versions, status, matching_score
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.reading.data.model.RobotConfigExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from robot_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limitStart != null and limitStart>=0">
            limit #{limitStart} , #{limitEnd}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from robot_config
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from robot_config
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <delete id="deleteByExample" parameterType="com.reading.data.model.RobotConfigExample">
        delete from robot_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.reading.data.model.RobotConfig">
    insert into robot_config (id, library_id, library_name, 
      apikey, token, versions, 
      status, matching_score)
    values (#{id,jdbcType=BIGINT}, #{libraryId,jdbcType=BIGINT}, #{libraryName,jdbcType=VARCHAR}, 
      #{apikey,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, #{versions,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{matchingScore,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.reading.data.model.RobotConfig" useGeneratedKeys="true"
            keyProperty="id">
        insert into robot_config
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="libraryId != null">
                library_id,
            </if>
            <if test="libraryName != null">
                library_name,
            </if>
            <if test="apikey != null">
                apikey,
            </if>
            <if test="token != null">
                token,
            </if>
            <if test="versions != null">
                versions,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="matchingScore != null">
                matching_score,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="libraryId != null">
                #{libraryId,jdbcType=BIGINT},
            </if>
            <if test="libraryName != null">
                #{libraryName,jdbcType=VARCHAR},
            </if>
            <if test="apikey != null">
                #{apikey,jdbcType=VARCHAR},
            </if>
            <if test="token != null">
                #{token,jdbcType=VARCHAR},
            </if>
            <if test="versions != null">
                #{versions,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="matchingScore != null">
                #{matchingScore,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.reading.data.model.RobotConfigExample"
            resultType="java.lang.Integer">
        select count(*) from robot_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update robot_config
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.libraryId != null">
                library_id = #{record.libraryId,jdbcType=BIGINT},
            </if>
            <if test="record.libraryName != null">
                library_name = #{record.libraryName,jdbcType=VARCHAR},
            </if>
            <if test="record.apikey != null">
                apikey = #{record.apikey,jdbcType=VARCHAR},
            </if>
            <if test="record.token != null">
                token = #{record.token,jdbcType=VARCHAR},
            </if>
            <if test="record.versions != null">
                versions = #{record.versions,jdbcType=INTEGER},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=INTEGER},
            </if>
            <if test="record.matchingScore != null">
                matching_score = #{record.matchingScore,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update robot_config
        set id = #{record.id,jdbcType=BIGINT},
        library_id = #{record.libraryId,jdbcType=BIGINT},
        library_name = #{record.libraryName,jdbcType=VARCHAR},
        apikey = #{record.apikey,jdbcType=VARCHAR},
        token = #{record.token,jdbcType=VARCHAR},
        versions = #{record.versions,jdbcType=INTEGER},
        status = #{record.status,jdbcType=INTEGER},
        matching_score = #{record.matchingScore,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.reading.data.model.RobotConfig">
        update robot_config
        <set>
            <if test="libraryId != null">
                library_id = #{libraryId,jdbcType=BIGINT},
            </if>
            <if test="libraryName != null">
                library_name = #{libraryName,jdbcType=VARCHAR},
            </if>
            <if test="apikey != null">
                apikey = #{apikey,jdbcType=VARCHAR},
            </if>
            <if test="token != null">
                token = #{token,jdbcType=VARCHAR},
            </if>
            <if test="versions != null">
                versions = #{versions,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="matchingScore != null">
                matching_score = #{matchingScore,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.reading.data.model.RobotConfig">
    update robot_config
    set library_id = #{libraryId,jdbcType=BIGINT},
      library_name = #{libraryName,jdbcType=VARCHAR},
      apikey = #{apikey,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      versions = #{versions,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      matching_score = #{matchingScore,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>